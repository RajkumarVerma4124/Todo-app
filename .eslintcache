[{"C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\index.js":"1","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\App.js":"2","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\reportWebVitals.js":"3","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\Todo.js":"4","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\firebase.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":1889,"mtime":1610903128887,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":2244,"mtime":1610909188381,"results":"10","hashOfConfig":"7"},{"size":465,"mtime":1610899445873,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zh0vg5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\index.js",[],["25","26"],"C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\App.js",["27"],"import React, { useState, useEffect } from 'react';\nimport Todo from './Todo';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  //when the app loads we need to listen to the database and fetch new todos as they get refreshed or added/removed\n  //console.log(input);\n  useEffect(() => {\n    //this code fire when the app.js loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    // this will fire up when we click the add button\n    event.preventDefault();  //it will stop the page from refresh\n    //console.log('i am working');\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    { /*setTodos([...todos, input]); */ }\n    setInput(''); //clear the input after clicking todo button\n  }\n    return ( \n      <div className=\"App\">\n        <h1> Welcome to Todo Application</h1>  \n        <form>\n          <FormControl>\n            <InputLabel>  Write a Todo... </InputLabel>\n            <Input value = {input} onChange={ event => setInput(event.target.value) }/>\n          </FormControl>\n\n          <Button disabled={!input} type='submit'onClick={addTodo} variant=\"contained\" color=\"primary\">\n            Add Todo\n          </Button>\n          {/*<button type='submit' onClick={addTodo}>Add Todo </button>*/} \n        </form>\n        \n\n        <ul>\n          {todos.map(todo => (\n            <Todo todo={todo}/>\n            //<li> {todo}</li>\n            ))\n          }\n         \n        </ul>\n        </div>\n    );\n}\n\nexport default App;","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\reportWebVitals.js",[],"C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\Todo.js",["28"],"import React, { useState } from 'react';\r\nimport \"./Todo.css\";\r\nimport db from './firebase';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { List, ListItem, ListItemText, ListItemAvatar, Button, Modal } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n\r\n}));\r\n\r\n\r\nfunction Todo(props) { \r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [input, setInput] = useState();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const updateTodo = () => {\r\n        //update the todo with the new input \r\n        db.collection('todos').doc(props.todo.id).set({\r\n            todo: input\r\n\r\n        }, { merge: true })\r\n        setOpen(false);\r\n    \r\n    };\r\n    return (\r\n        <>\r\n        <Modal open={open} onClose={e => setOpen(false)}>\r\n            <div className={classes.paper}>\r\n                <h1> I am a model </h1>\r\n                <input placeholder={props.todo.todo} className={classes.margin} value={input} onChange={event => setInput(event.target.value) }/>\r\n                <Button disabled={!input} onClick={updateTodo} size=\"small\"  variant=\"contained\" color=\"primary\"> Update Todo</Button>\r\n            </div>\r\n        </Modal>\r\n\r\n        <List> \r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={props.todo.todo} secondary=\"This is in the todo list\"/>\r\n            </ListItem>\r\n            <EditIcon onClick={e => setOpen(true)} > </EditIcon>\r\n            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}> </DeleteForeverIcon>\r\n            { /*<li>{props.text}</li>*/ }      \r\n        </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","C:\\Users\\Raj\\Documents\\Python Scripts\\todo_app\\src\\firebase.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":29,"column":5,"nodeType":"35","messageId":"36","endLine":29,"endColumn":42},{"ruleId":"37","severity":1,"message":"38","line":35,"column":11,"nodeType":"39","messageId":"40","endLine":35,"endColumn":21},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'handleOpen' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]